#summary Coding guidelines for `GeoBeagle`


  * Download android-formatting.xml and android.importorder files and import them into Eclipse.  Use them to format your code before checking in.
  * Use Eclipse Source / Sort Members
  * Make sure new files have unix line-endings, not DOS.
  * Watch the Google "clean code talks" videos, and read the doc for `PowerMock`.  E.g. one rule from the clean code talks:  don't do any work in constructors--work in constructors is work that has to repeated for each test case.
  * Make sure all the tests pass!
  * Even better, install `EclEmma`, and make sure you have 100% test coverage for your new code.
  * A class named `MyFancyClass` should generally have variables named "`myFancyClass`--that way Eclipse will automatically rename it if you change your mind about the name.

=== The DI folder===
"Untestable" code goes into the "di" directory.  (Untestable is different from untested!)  The following code does not need unit tests:
  * one-time object constructors and graph construction.
  * One-time object configuration (e.g. setting up a `MapView`).
  * Code derived from Android classes (but put most of the work into a delegate, so *that* can be tested.)
  * Enums--but only because there is a bug in Emma which makes it impossible to get 100% code coverage for an enum.

A lot of the early code in `GeoBeagle` was written before `PowerMock` was used for testing.  Without `PowerMock`, it is impossible to test constructors, so a lot of factory classes were created.  Now that we have `PowerMock`, many (but not all) of the factory classes can go away.